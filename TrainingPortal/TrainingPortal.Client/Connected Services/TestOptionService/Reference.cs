//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TrainingPortal.Client.TestOptionService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TestOptionDto", Namespace="http://schemas.datacontract.org/2004/07/TrainingPortal.Service.Dto")]
    [System.SerializableAttribute()]
    public partial class TestOptionDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsCheckedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsChecked {
            get {
                return this.IsCheckedField;
            }
            set {
                if ((this.IsCheckedField.Equals(value) != true)) {
                    this.IsCheckedField = value;
                    this.RaisePropertyChanged("IsChecked");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TestOptionService.ITestOptionService")]
    public interface ITestOptionService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestOptionService/GetList", ReplyAction="http://tempuri.org/ITestOptionService/GetListResponse")]
        TrainingPortal.Client.TestOptionService.TestOptionDto[] GetList(string testId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestOptionService/Get", ReplyAction="http://tempuri.org/ITestOptionService/GetResponse")]
        TrainingPortal.Client.TestOptionService.TestOptionDto Get(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestOptionService/Update", ReplyAction="http://tempuri.org/ITestOptionService/UpdateResponse")]
        void Update(TrainingPortal.Client.TestOptionService.TestOptionDto testOption);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestOptionService/Create", ReplyAction="http://tempuri.org/ITestOptionService/CreateResponse")]
        void Create(TrainingPortal.Client.TestOptionService.TestOptionDto testOption, string testId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestOptionService/Delete", ReplyAction="http://tempuri.org/ITestOptionService/DeleteResponse")]
        void Delete(string id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITestOptionServiceChannel : TrainingPortal.Client.TestOptionService.ITestOptionService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestOptionServiceClient : System.ServiceModel.ClientBase<TrainingPortal.Client.TestOptionService.ITestOptionService>, TrainingPortal.Client.TestOptionService.ITestOptionService {
        
        public TestOptionServiceClient() {
        }
        
        public TestOptionServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TestOptionServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TestOptionServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TestOptionServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public TrainingPortal.Client.TestOptionService.TestOptionDto[] GetList(string testId) {
            return base.Channel.GetList(testId);
        }
        
        public TrainingPortal.Client.TestOptionService.TestOptionDto Get(string id) {
            return base.Channel.Get(id);
        }
        
        public void Update(TrainingPortal.Client.TestOptionService.TestOptionDto testOption) {
            base.Channel.Update(testOption);
        }
        
        public void Create(TrainingPortal.Client.TestOptionService.TestOptionDto testOption, string testId) {
            base.Channel.Create(testOption, testId);
        }
        
        public void Delete(string id) {
            base.Channel.Delete(id);
        }
    }
}
