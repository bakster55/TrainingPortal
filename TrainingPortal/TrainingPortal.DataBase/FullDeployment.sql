/*
Deployment script for TrainingPortal1

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "TrainingPortal1"
:setvar DefaultFilePrefix "TrainingPortal1"
:setvar DefaultDataPath "C:\Users\anabi\AppData\Local\Microsoft\VisualStudio\SSDT"
:setvar DefaultLogPath "C:\Users\anabi\AppData\Local\Microsoft\VisualStudio\SSDT"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[Audience]...';


GO
CREATE TABLE [dbo].[Audience] (
    [Id]   INT           IDENTITY (1, 1) NOT NULL,
    [Name] NVARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Category]...';


GO
CREATE TABLE [dbo].[Category] (
    [Id]   INT           IDENTITY (1, 1) NOT NULL,
    [Name] NVARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Certificate]...';


GO
CREATE TABLE [dbo].[Certificate] (
    [Id]       UNIQUEIDENTIFIER NOT NULL,
    [UserId]   INT              NOT NULL,
    [Result]   INT              NOT NULL,
    [CourseId] INT              NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Course]...';


GO
CREATE TABLE [dbo].[Course] (
    [Id]          INT            IDENTITY (1, 1) NOT NULL,
    [Name]        NVARCHAR (50)  NOT NULL,
    [Description] NVARCHAR (MAX) NULL,
    [CategoryId]  INT            NULL,
    [AudienceId]  INT            NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[CourseForUser]...';


GO
CREATE TABLE [dbo].[CourseForUser] (
    [Id]       INT NOT NULL,
    [UserId]   INT NOT NULL,
    [CourseId] INT NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Lesson]...';


GO
CREATE TABLE [dbo].[Lesson] (
    [Id]       INT            IDENTITY (1, 1) NOT NULL,
    [CourseId] INT            NOT NULL,
    [Name]     NVARCHAR (50)  NOT NULL,
    [Content]  NVARCHAR (MAX) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Role]...';


GO
CREATE TABLE [dbo].[Role] (
    [Id]   INT           IDENTITY (1, 1) NOT NULL,
    [Name] NVARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Test]...';


GO
CREATE TABLE [dbo].[Test] (
    [Id]       INT            IDENTITY (1, 1) NOT NULL,
    [CourseId] INT            NOT NULL,
    [Question] NVARCHAR (MAX) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[TestOption]...';


GO
CREATE TABLE [dbo].[TestOption] (
    [Id]        INT           IDENTITY (1, 1) NOT NULL,
    [TestId]    INT           NOT NULL,
    [Name]      NVARCHAR (50) NOT NULL,
    [IsChecked] BIT           NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[User]...';


GO
CREATE TABLE [dbo].[User] (
    [Id]           INT            IDENTITY (1, 1) NOT NULL,
    [Name]         NVARCHAR (50)  NOT NULL,
    [Email]        NVARCHAR (50)  NOT NULL,
    [PasswordHash] NVARCHAR (MAX) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC),
    UNIQUE NONCLUSTERED ([Email] ASC)
);


GO
PRINT N'Creating [dbo].[User].[IX_Email]...';


GO
CREATE NONCLUSTERED INDEX [IX_Email]
    ON [dbo].[User]([Email] ASC);


GO
PRINT N'Creating [dbo].[UserRole]...';


GO
CREATE TABLE [dbo].[UserRole] (
    [UserId] INT NOT NULL,
    [RoleId] INT NOT NULL,
    PRIMARY KEY CLUSTERED ([UserId] ASC, [RoleId] ASC)
);


GO
PRINT N'Creating unnamed constraint on [dbo].[Certificate]...';


GO
ALTER TABLE [dbo].[Certificate]
    ADD FOREIGN KEY ([UserId]) REFERENCES [dbo].[User] ([Id]);


GO
PRINT N'Creating unnamed constraint on [dbo].[Certificate]...';


GO
ALTER TABLE [dbo].[Certificate]
    ADD FOREIGN KEY ([CourseId]) REFERENCES [dbo].[Course] ([Id]);


GO
PRINT N'Creating unnamed constraint on [dbo].[Course]...';


GO
ALTER TABLE [dbo].[Course]
    ADD FOREIGN KEY ([CategoryId]) REFERENCES [dbo].[Category] ([Id]);


GO
PRINT N'Creating unnamed constraint on [dbo].[Course]...';


GO
ALTER TABLE [dbo].[Course]
    ADD FOREIGN KEY ([AudienceId]) REFERENCES [dbo].[Audience] ([Id]);


GO
PRINT N'Creating unnamed constraint on [dbo].[CourseForUser]...';


GO
ALTER TABLE [dbo].[CourseForUser]
    ADD FOREIGN KEY ([UserId]) REFERENCES [dbo].[User] ([Id]);


GO
PRINT N'Creating unnamed constraint on [dbo].[CourseForUser]...';


GO
ALTER TABLE [dbo].[CourseForUser]
    ADD FOREIGN KEY ([CourseId]) REFERENCES [dbo].[Course] ([Id]);


GO
PRINT N'Creating unnamed constraint on [dbo].[Lesson]...';


GO
ALTER TABLE [dbo].[Lesson]
    ADD FOREIGN KEY ([CourseId]) REFERENCES [dbo].[Course] ([Id]);


GO
PRINT N'Creating unnamed constraint on [dbo].[Test]...';


GO
ALTER TABLE [dbo].[Test]
    ADD FOREIGN KEY ([CourseId]) REFERENCES [dbo].[Course] ([Id]);


GO
PRINT N'Creating unnamed constraint on [dbo].[TestOption]...';


GO
ALTER TABLE [dbo].[TestOption]
    ADD FOREIGN KEY ([TestId]) REFERENCES [dbo].[Test] ([Id]);


GO
PRINT N'Creating unnamed constraint on [dbo].[UserRole]...';


GO
ALTER TABLE [dbo].[UserRole]
    ADD FOREIGN KEY ([UserId]) REFERENCES [dbo].[User] ([Id]);


GO
PRINT N'Creating unnamed constraint on [dbo].[UserRole]...';


GO
ALTER TABLE [dbo].[UserRole]
    ADD FOREIGN KEY ([RoleId]) REFERENCES [dbo].[Role] ([Id]);


GO
PRINT N'Creating [dbo].[AddAudience]...';


GO
CREATE PROCEDURE [dbo].[AddAudience]
	@name NVARCHAR(50)
AS
	INSERT INTO Audience VALUES(@name)
RETURN 0
GO
PRINT N'Creating [dbo].[AddCategory]...';


GO
CREATE PROCEDURE [dbo].[AddCategory]
	@name NVARCHAR(50)
AS
	INSERT INTO Category VALUES(@name)
RETURN 0
GO
PRINT N'Creating [dbo].[AddCertificate]...';


GO
CREATE PROCEDURE [dbo].[AddCertificate]
	@id UNIQUEIDENTIFIER,
	@userId INT,
	@result INT,
	@courseId INT
AS
	INSERT INTO [Certificate] VALUES(@id, @userId, @result, @courseId)
RETURN 0
GO
PRINT N'Creating [dbo].[AddCourse]...';


GO
CREATE PROCEDURE [dbo].[AddCourse]
	@name NVARCHAR(50),
	@description NVARCHAR(MAX),
	@categoryId INT,
	@audienceId INT
AS
	INSERT INTO [Course] VALUES(@name, @description, @categoryId, @audienceId)
RETURN 0
GO
PRINT N'Creating [dbo].[AddLesson]...';


GO
CREATE PROCEDURE [dbo].[AddLesson]
	@courseId INT,
	@name NVARCHAR(50),
	@content NVARCHAR(MAX)
AS
	INSERT INTO Lesson VALUES(@courseId, @name, @content)
RETURN 0
GO
PRINT N'Creating [dbo].[AddRole]...';


GO
CREATE PROCEDURE [dbo].[AddRole]
	@id INT OUTPUT,
	@name NVARCHAR(50)
AS
	INSERT INTO [Role] VALUES(@name)
	SELECT @id = SCOPE_IDENTITY()
RETURN 0
GO
PRINT N'Creating [dbo].[AddTest]...';


GO
CREATE PROCEDURE [dbo].[AddTest]
	@courseId INT,
	@question NVARCHAR(MAX)
AS
	INSERT INTO Test VALUES(@courseId, @question)
RETURN 0
GO
PRINT N'Creating [dbo].[AddTestOption]...';


GO
CREATE PROCEDURE [dbo].[AddTestOption]
	@testId INT,
	@name NVARCHAR(50),
	@isChecked BIT
AS
	INSERT INTO TestOption VALUES(@testId, @name, @isChecked)
RETURN 0
GO
PRINT N'Creating [dbo].[AddUser]...';


GO
CREATE PROCEDURE [dbo].[AddUser]
	@id INT OUTPUT,
	@name NVARCHAR(50),
	@email NVARCHAR(50),
	@passwordHash NVARCHAR(MAX)
AS
	INSERT INTO [User] VALUES(@name, @email, @passwordHash)
	SELECT @id = SCOPE_IDENTITY()
RETURN 0
GO
PRINT N'Creating [dbo].[AddUserToRole]...';


GO
CREATE PROCEDURE [dbo].[AddUserToRole]
	@userId INT,
	@roleName NVARCHAR(50)
AS
	INSERT INTO [UserRole] VALUES(@userId, (SELECT Id FROM Role WHERE Name = @roleName))
RETURN 0
GO
PRINT N'Creating [dbo].[DeleteAudience]...';


GO
CREATE PROCEDURE [dbo].[DeleteAudience]
	@id INT
AS
	DELETE FROM Audience WHERE Id = @id
RETURN 0
GO
PRINT N'Creating [dbo].[DeleteCategory]...';


GO
CREATE PROCEDURE [dbo].[DeleteCategory]
	@id INT
AS
	DELETE FROM Category WHERE Id = @id
RETURN 0
GO
PRINT N'Creating [dbo].[DeleteCertificate]...';


GO
CREATE PROCEDURE [dbo].[DeleteCertificate]
	@id UNIQUEIDENTIFIER
AS
	DELETE FROM [Certificate] WHERE Id = @id
RETURN 0
GO
PRINT N'Creating [dbo].[DeleteCourse]...';


GO
CREATE PROCEDURE [dbo].[DeleteCourse]
	@id INT
AS
	DELETE FROM [Course] WHERE Id = @id
RETURN 0
GO
PRINT N'Creating [dbo].[DeleteLesson]...';


GO
CREATE PROCEDURE [dbo].[DeleteLesson]
	@id INT
AS
	DELETE FROM Lesson WHERE Id = @id
RETURN 0
GO
PRINT N'Creating [dbo].[DeleteRole]...';


GO
CREATE PROCEDURE [dbo].[DeleteRole]
	@id INT OUTPUT
AS
	DELETE FROM [Role] WHERE Id = @id
RETURN 0
GO
PRINT N'Creating [dbo].[DeleteTest]...';


GO
CREATE PROCEDURE [dbo].[DeleteTest]
	@id INT
AS
	DELETE FROM Test WHERE Id = @id
RETURN 0
GO
PRINT N'Creating [dbo].[DeleteTestOption]...';


GO
CREATE PROCEDURE [dbo].[DeleteTestOption]
	@id INT
AS
	DELETE FROM TestOption WHERE Id = @id
RETURN 0
GO
PRINT N'Creating [dbo].[DeleteUser]...';


GO
CREATE PROCEDURE [dbo].[DeleteUser]
	@id INT OUTPUT
AS
	DELETE FROM [User] WHERE Id = @id
RETURN 0
GO
PRINT N'Creating [dbo].[DeleteUserFromRole]...';


GO
CREATE PROCEDURE [dbo].[DeleteUserFromRole]
	@userId INT,
	@roleName NVARCHAR(50)
AS
	DELETE FROM [UserRole] WHERE UserId = @userId AND RoleId = (SELECT Id FROM Role WHERE Name = @roleName);
RETURN 0
GO
PRINT N'Creating [dbo].[GetAudience]...';


GO
CREATE PROCEDURE [dbo].[GetAudience]
	@id INT
AS
	SELECT TOP 1 * FROM Audience WHERE Id = @id
RETURN 0
GO
PRINT N'Creating [dbo].[GetAudienceList]...';


GO
CREATE PROCEDURE [dbo].[GetAudienceList]
	@id int = NULL,
	@name NVARCHAR(50) = NULL
AS
	SELECT * FROM Audience
RETURN 0
GO
PRINT N'Creating [dbo].[GetCategories]...';


GO
CREATE PROCEDURE [dbo].[GetCategories]
	@id int = NULL,
	@name NVARCHAR(50) = NULL
AS
	SELECT * FROM Category
RETURN 0
GO
PRINT N'Creating [dbo].[GetCategory]...';


GO
CREATE PROCEDURE [dbo].[GetCategory]
	@id INT
AS
	SELECT TOP 1 * FROM Category WHERE Id = @id
RETURN 0
GO
PRINT N'Creating [dbo].[GetCertificate]...';


GO
CREATE PROCEDURE [dbo].[GetCertificate]
	@userId INT,
	@courseId INT
AS
	SELECT TOP 1 * FROM [Certificate] WHERE UserId = @userId AND CourseId = @courseId
RETURN 0
GO
PRINT N'Creating [dbo].[GetCourse]...';


GO
CREATE PROCEDURE [dbo].[GetCourse]
	@id INT
AS
	SELECT TOP 1 * FROM [Course] 
		LEFT JOIN Category ON Course.CategoryId = Category.Id
		LEFT JOIN Audience ON Course.AudienceId = Audience.Id WHERE Course.Id = @id
RETURN 0
GO
PRINT N'Creating [dbo].[GetCourses]...';


GO
CREATE PROCEDURE [dbo].[GetCourses]
	@id int = NULL,
	@name NVARCHAR(50) = NULL,
	@description NVARCHAR(MAX) = NULL
AS
	SELECT * FROM [Course] 
		LEFT JOIN Category ON Course.CategoryId = Category.Id 
		LEFT JOIN Audience ON Course.AudienceId = Audience.Id
RETURN 0
GO
PRINT N'Creating [dbo].[GetLesson]...';


GO
CREATE PROCEDURE [dbo].[GetLesson]
	@id INT
AS
	SELECT TOP 1 * FROM Lesson WHERE Id = @id
RETURN 0
GO
PRINT N'Creating [dbo].[GetLessons]...';


GO
CREATE PROCEDURE [dbo].[GetLessons]
	@courseId int
AS
	SELECT * FROM Lesson WHERE CourseId = @courseId 
RETURN 0
GO
PRINT N'Creating [dbo].[GetRole]...';


GO
CREATE PROCEDURE [dbo].[GetRole]
	@name NVARCHAR(50) = NULL OUTPUT,
	@id int = NULL OUTPUT
AS
	SELECT @id = [Role].Id, @name = [Role].Name FROM [Role]
	WHERE ((@name IS NULL) OR (Name = @name)) AND ((@id IS NULL) OR (Id = @id))
RETURN 0
GO
PRINT N'Creating [dbo].[GetRoles]...';


GO
CREATE PROCEDURE [dbo].[GetRoles]
AS
	SELECT * FROM [Role]
RETURN 0
GO
PRINT N'Creating [dbo].[GetTest]...';


GO
CREATE PROCEDURE [dbo].[GetTest]
	@id INT
AS
	SELECT TOP 1 * FROM Test WHERE Id = @id
RETURN 0
GO
PRINT N'Creating [dbo].[GetTestOption]...';


GO
CREATE PROCEDURE [dbo].[GetTestOption]
	@id INT
AS
	SELECT TOP 1 * FROM TestOption WHERE Id = @id
RETURN 0
GO
PRINT N'Creating [dbo].[GetTestOptions]...';


GO
CREATE PROCEDURE [dbo].[GetTestOptions]
	@testId int
AS
	SELECT * FROM TestOption WHERE TestId = @testId 
RETURN 0
GO
PRINT N'Creating [dbo].[GetTests]...';


GO
CREATE PROCEDURE [dbo].[GetTests]
	@courseId int
AS
	SELECT * FROM Test WHERE CourseId = @courseId
RETURN 0
GO
PRINT N'Creating [dbo].[GetUser]...';


GO
CREATE PROCEDURE [dbo].[GetUser]
	@email NVARCHAR(50) = NULL OUTPUT,
	@name NVARCHAR(50) = NULL OUTPUT,
	@passwordHash NVARCHAR(MAX) = NULL OUTPUT,
	@id int = NULL OUTPUT
AS
	SELECT @id = [User].Id, @email = [User].Email, @name = [User].Name, @passwordHash = [User].PasswordHash FROM [User]
	WHERE ((@email IS NULL) OR (Email = @email)) AND ((@name IS NULL) OR (Name = @name)) AND ((@id IS NULL) OR (Id = @id))
RETURN 0
GO
PRINT N'Creating [dbo].[GetUserRoles]...';


GO
CREATE PROCEDURE [dbo].[GetUserRoles]
	@userId INT
AS
	SELECT Name FROM Role WHERE Id IN (SELECT RoleId FROM UserRole WHERE UserId = @userId)
RETURN 0
GO
PRINT N'Creating [dbo].[GetUsers]...';


GO
CREATE PROCEDURE [dbo].[GetUsers]
AS
	SELECT * FROM [User]
RETURN 0
GO
PRINT N'Creating [dbo].[IsUserInRole]...';


GO
CREATE PROCEDURE [dbo].[IsUserInRole]
	@userId INT,
	@roleName NVARCHAR(50)
AS
	SELECT * FROM UserRole WHERE UserId = @userId AND RoleId = (SELECT Id FROM Role WHERE Name = @roleName)
RETURN 0
GO
PRINT N'Creating [dbo].[UpdateAudience]...';


GO
CREATE PROCEDURE [dbo].[UpdateAudience]
    @id INT,
    @name NVARCHAR(50) = NULL
AS
BEGIN
    UPDATE Audience SET Name = ISNULL(@name, Name)
	WHERE id = @id
END
GO
PRINT N'Creating [dbo].[UpdateCategory]...';


GO
CREATE PROCEDURE [dbo].[UpdateCategory]
    @id INT,
    @name NVARCHAR(50) = NULL
AS
BEGIN
    UPDATE Category SET Name=ISNULL(@name,Name)
	WHERE id=@id
END
GO
PRINT N'Creating [dbo].[UpdateCourse]...';


GO
CREATE PROCEDURE [dbo].[UpdateCourse]
    @id INT,
    @name NVARCHAR(50) = NULL,
    @description NVARCHAR(MAX) = NULL,
	@categoryId INT,
	@audienceId INT
AS
BEGIN
    UPDATE [Course] SET 
	AudienceId = @audienceId, 
	CategoryId = @categoryId, 
	Description = ISNULL(@description, Description), 
	Name = ISNULL(@name , Name)
	WHERE id = @id
END
GO
PRINT N'Creating [dbo].[UpdateLesson]...';


GO
CREATE PROCEDURE [dbo].[UpdateLesson]
    @id INT,
    @name NVARCHAR(50) = NULL,
	@content NVARCHAR(MAX) = NULL
AS
BEGIN
	UPDATE Lesson SET Name = ISNULL(@name, Name), Content = ISNULL(@content, Content)
	WHERE id = @id
END
GO
PRINT N'Creating [dbo].[UpdateRole]...';


GO
CREATE PROCEDURE [dbo].[UpdateRole]
    @id int,
    @name nvarchar(50) = NULL
AS
BEGIN
    UPDATE [Role] SET Name=ISNULL(@name, Name) WHERE id=@id
END
GO
PRINT N'Creating [dbo].[UpdateTest]...';


GO
CREATE PROCEDURE [dbo].[UpdateTest]
    @id INT,
	@question NVARCHAR(MAX) = NULL
AS
BEGIN
	UPDATE Test SET Question = ISNULL(@question, Question)
	WHERE id = @id
END
GO
PRINT N'Creating [dbo].[UpdateTestOption]...';


GO
CREATE PROCEDURE [dbo].[UpdateTestOption]
    @id INT,
	@name NVARCHAR(50),
	@isChecked BIT
AS
BEGIN
	UPDATE TestOption SET Name = ISNULL(@name, Name), IsChecked = ISNULL(@isChecked, IsChecked)
	WHERE id = @id
END
GO
PRINT N'Creating [dbo].[UpdateUser]...';


GO
CREATE PROCEDURE [dbo].[UpdateUser]
    @id int,
    @email nvarchar(50) = NULL,
    @name nvarchar(50) = NULL,
    @passwordHash nvarchar(MAX) = NULL
AS
BEGIN
    UPDATE [User] SET Email=ISNULL(@email,Email), Name=ISNULL(@name,Name), PasswordHash=ISNULL(@passwordHash, PasswordHash)
	WHERE id=@id
END
GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '6b693aa8-2f8c-41cf-8c81-c4faefb152a9')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('6b693aa8-2f8c-41cf-8c81-c4faefb152a9')

GO

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

INSERT INTO [Role] Values ('admin'), ('editor')
INSERT INTO [Role] Values('editor')

INSERT INTO [User] Values('admin', 'a@a.com', 'ANJgDYTRGFvkAA9GKeD7VyKrZBDqEANVOpGslwfSLC48Rg/MiWOFlJ2hk5lKzKKywQ==')
INSERT INTO [User] Values('editor', 'e@e.com', 'ANJgDYTRGFvkAA9GKeD7VyKrZBDqEANVOpGslwfSLC48Rg/MiWOFlJ2hk5lKzKKywQ==')

INSERT INTO [UserRole] Values 
	(
		(SELECT TOP 1 Id FROM [User] WHERE [Name] = 'admin'), 
		(SELECT TOP 1 Id FROM [Role] WHERE [Name] = 'admin')
	),
	(
		(SELECT TOP 1 Id FROM [User] WHERE [Name] = 'editor'), 
		(SELECT TOP 1 Id FROM [Role] WHERE [Name] = 'editor')
	)

INSERT INTO [Category] Values('Java'), ('C#'), ('JavaScript'), ('Html')

INSERT INTO [Audience] Values('Novice'), ('Advanced'), ('Professional')

INSERT INTO [Course] Values
	(
		'Object Oriented Programming in C#',
		'Want to learn a different programming language? C# is a great place to start.',
		(SELECT TOP 1 Id FROM [Category] WHERE [Name] = 'C#'), 
		(SELECT TOP 1 Id FROM [Audience] WHERE [Name] = 'Novice')
	), 
	(
		'Introduction To JavaScript',
		'JavaScript is a widely used web-based programming language that powers the dynamic behavior on most websites, including this one.',
		(SELECT TOP 1 Id FROM [Category] WHERE [Name] = 'JavaScript'), 
		(SELECT TOP 1 Id FROM [Audience] WHERE [Name] = 'Professional')
	), 
	(
		'HTML Fundamentals',
		'Spoiler alert: every web page on the Internet is secretly written in HyperText Markup Language, otherwise known as "HTML." So why dont you see code and markup everywhere? Well, your browser reads HTML for you and just shows you the pretty version. It is sheltering you!',
		(SELECT TOP 1 Id FROM [Category] WHERE [Name] = 'Html'), 
		(SELECT TOP 1 Id FROM [Audience] WHERE [Name] = 'Advanced')
	)

DECLARE @categoryId INT;
SET @categoryId = (SELECT TOP 1 Id FROM [Category] WHERE [Name] = 'C#');

DECLARE @courseId INT;
SET @courseId = (SELECT TOP 1 Id FROM [Course] WHERE [CategoryId] = @categoryId);

INSERT INTO [Lesson] Values
	(
		@courseId, 
		'Lesson one',
		'Lesson one content.'
	), 
	(
		@courseId, 
		'Lesson two',
		'Lesson two content.'
	), 
	(
		@courseId, 
		'Lesson three',
		'Lesson three content.'
	), 
	(
		@courseId, 
		'Lesson four',
		'Lesson four content.'
	)

INSERT INTO [Test] Values
	(
		@courseId, 
		'C# class can inherit multiple ________'
	)

INSERT INTO [TestOption] Values
	(
		IDENT_CURRENT('Test'), 
		'Class',
		0
	),
		(
		IDENT_CURRENT('Test'), 
		'Interface',
		1
	),
	(
		IDENT_CURRENT('Test'), 
		'Abstract class',
		0
	),
	(
		IDENT_CURRENT('Test'), 
		'Static class',
		0
	)

INSERT INTO [Test] Values
	(
		@courseId, 
		'Which of the followings are value types in C#?'
	)

INSERT INTO [TestOption] Values
	(
		IDENT_CURRENT('Test'), 
		'Int32',
		1
	),
		(
		IDENT_CURRENT('Test'), 
		'Double',
		1
	),
	(
		IDENT_CURRENT('Test'), 
		'Decimal',
		1
	),
	(
		IDENT_CURRENT('Test'), 
		'String',
		0
	)

INSERT INTO [Test] Values
	(
		@courseId, 
		'Which of the following is a reference type in C#?'
	)

INSERT INTO [TestOption] Values
	(
		IDENT_CURRENT('Test'), 
		'String',
		1
	),
		(
		IDENT_CURRENT('Test'), 
		'Long',
		0
	),
	(
		IDENT_CURRENT('Test'), 
		'Boolean',
		0
	),
	(
		IDENT_CURRENT('Test'), 
		'Decimal',
		0
	)

INSERT INTO [Test] Values
	(
		@courseId, 
		'What is Nullable type?'
	)

INSERT INTO [TestOption] Values
	(
		IDENT_CURRENT('Test'), 
		'It allows assignment of null to reference type.',
		1
	),
		(
		IDENT_CURRENT('Test'), 
		'It allows assignment of null to value type.',
		0
	),
	(
		IDENT_CURRENT('Test'), 
		'It allows assignment of null to static class.',
		0
	)
GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
